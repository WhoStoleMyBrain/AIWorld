// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel FillArray
#pragma kernel ClearArray

#include "Noise/SimplexNoise.compute"
#include "Noise/HashNoise.compute"
#include "Voxel.compute"

struct NoiseLayer {
    float gain;
    float frequency;
    float lacunarity;
    float persistence;
    int octaves;

    float caveScale;
    float caveThreshold;

    int surfaceVoxelId;
    int subSurfaceVoxelId;
};

StructuredBuffer<NoiseLayer> noiseArray;
RWStructuredBuffer<Voxel> voxelArray;
RWStructuredBuffer<float4> specialBlocksBuffer;
RWStructuredBuffer<uint> count;

float3 chunkPosition;
float3 seedOffset;

uint chunkSizeX;
uint chunkSizeY;

bool generateCaves;
bool forceFloor;

uint maxHeight;
uint oceanHeight;
int noiseCount;
int seed;

uint flattenCoord(float3 idx)
{
    return round(idx.x) + (round(idx.y) * (chunkSizeX + 5)) + (round(idx.z) * (chunkSizeX + 5) * (chunkSizeY + 1));
}

float evaluateNoise(float3 pos, float terrainHeight)
{
    float h = 1;
    float G = exp2(-h);
    float f = 1;
    float a = 1;
    float t = 0;
    
    for (int i = 0; i < 4; i++)
    {
        t += a * snoise(f * (pos / (noiseArray[0].caveScale / ((uint) terrainHeight > oceanHeight ? 1 : 6))));
        f *= 2.0;
        a *= G;
    }
    return t;
}

float fractalNoise(float2 pos, int noisePosition)
{
    float v = 0;
    float amplitude = 1;
    
    NoiseLayer b = noiseArray[noisePosition];
    float3 p1 = float3(pos.xy, seed);
    for (int i = 0; i < noiseArray[noisePosition].octaves; i++)
    {
        v += snoise(float3(p1.xy / b.frequency, seed)) * amplitude;

        p1.xy *= b.lacunarity;
        
        amplitude *= b.persistence;
    }
    v = v * v;
    return clamp(v, 0, 1);
}

bool getDensityAtPoint(float3 pos, out int roundedHeight, out float density)
{
    NoiseLayer selectednoise = noiseArray[0];
    
    float weightH = fractalNoise(pos.xz, 0);
    float height = weightH * 128;
    roundedHeight = floor(height);
    bool hollow = distance(evaluateNoise(pos, roundedHeight), selectednoise.caveThreshold) < 0.125;
    
    if (pos.y <= 1)
        hollow = false;
    
    density = hollow ? 1000 : pos.y - height;
    return true;
}


[numthreads(8, 8, 8)]
void FillArray(uint3 i : SV_DispatchThreadID)
{
    float3 id = float3(i);
    
    if (any(id.xz > chunkSizeX + 3))
        return;
    
    float3 pos = id + chunkPosition + seedOffset;
    float2 posXZ = pos.xz;

    Voxel vox;
    vox.voxelData = 0;
    vox.densityData = 0u;
    vox.densityDataB = 0u;
    int voxelId = 0;
    
    NoiseLayer selectednoise = noiseArray[0];
    int roundedHeight;
    float density;
    
    getDensityAtPoint(pos, roundedHeight, density);
    
    bool isSurfaceBlock = pos.y >= roundedHeight - 3;
    int ida = isSurfaceBlock ? selectednoise.surfaceVoxelId : selectednoise.subSurfaceVoxelId;
    
    
    if (density <= 0)
        voxelId = ida;
   
    for (int iX = 0; iX < 4; iX++)
        for (int iY = 0; iY < 4; iY++)
            for (int iZ = 0; iZ < 4; iZ++)
            {
                getDensityAtPoint(pos + (float3(iX, iY, iZ) * 0.25), roundedHeight, density);
                if (distance(density, 0) < .125)
                {
                    vox.setVoxelDensity(iX, iY, iZ, true);
                }
            }

    if (voxelId != 0)
        InterlockedAdd(count[0], 1);

    if (id.y == (uint) roundedHeight && voxelId != 0 && id.y < 240)
    {
        bool placeFoliage = hnoise(float3(posXZ * 2, seed)) > 0.999;
        //placeFoliage = false;
        if (placeFoliage)
        {
            int typeOf = hnoise(float3(pos.xz * 25, seed)) * 75;
            int foliageID;
            if (typeOf < 30)
                foliageID = 243;
            else if (typeOf < 45)
            {
                bool canSpawnTree = true;
                int tHeight, index;
                for (int x = -1; x <= 1; x++)
                    for (int z = -1; z <= 1; z++)
                        if (getDensityAtPoint(pos, tHeight, density) && tHeight != roundedHeight)
                            canSpawnTree = false;

                if (canSpawnTree)
                    foliageID = 244;
                else
                    foliageID = 0;
            }
            else if (typeOf < 75)
                foliageID = 245;

            int counter = 0;

            if (foliageID != 0)
            {
                InterlockedAdd(count[1], 1, counter);
                specialBlocksBuffer[counter] = float4(id + float3(0, 1, 0), foliageID);
            }
        }
    }
    
    
    vox.setId(voxelId);
    voxelArray[flattenCoord(id)] = vox;
}

[numthreads(8, 8, 8)]
void ClearArray(uint3 i : SV_DispatchThreadID)
{
    float3 id = float3(i);
    Voxel emptyVoxel;
    emptyVoxel.voxelData = 0;
    emptyVoxel.densityData = 0u;
    emptyVoxel.densityDataB = 0u;
    voxelArray[flattenCoord(id)] = emptyVoxel;
}