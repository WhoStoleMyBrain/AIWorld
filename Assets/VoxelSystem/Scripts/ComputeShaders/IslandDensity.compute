#pragma kernel ClearArray
#pragma kernel FillArray

#include "WorldStructs.cginc"
#include "SharedVariables.cginc"

float islandRadius;
int seed;

[numthreads(8, 8, 8)]
void ClearArray(uint3 i : SV_DispatchThreadID)
{
    float3 id = float3(i);
    Voxel emptyVoxel;
    emptyVoxel.voxelData = 0;
    emptyVoxel.densityData = 0u;
    emptyVoxel.densityDataB = 0u;
    voxelArray[flattenCoord(id)] = emptyVoxel;
}

float islandSdf(float2 pos)
{
    return length(pos - float2(0, 0)) - islandRadius;
}

float getDensity(float3 position, out float theight, out float oHeight)
{
    float3 pint = float3(position.x, 0, position.z) / 92;
    pint.y = seed * 52304;
    float height = (cnoise(pint) / 2) + 0.5;
    height = (42 + (height * 64));
    float island = 1 - islandSdf(position.xz) / (islandRadius);
    
    //height *= lerp(1, 0, island);
    height = clamp((height), 1, chunkSizeY) * clamp(island, 0, 1);
    theight = clamp(island, 0, 1) < 1 ? -1 : floor(height);
    oHeight = floor(height);
    return position.y - height;
}



[numthreads(8, 8, 8)]
void FillArray(uint3 i : SV_DispatchThreadID)
{
    float3 id = float3(i);
    
    if (any(id.xz > (int) chunkSizeX + 3) || id.y > chunkSizeY)
        return;
    
    float2 pos = id.xz + chunkPosition.xz;
    Voxel voxel;
    int voxelId = 0;
    voxel.densityData = 0;
    voxel.densityDataB = 0;
    voxel.voxelData = 0;
    
    
    float height, bHeight;
    float density = getDensity(id + chunkPosition, height, bHeight);
    
    if (density <= 0)
    {
        if (id.y < height - 3)
            voxelId = 2;
        else
            voxelId = 1;
    }
    if (height == -1 && id.y <= 42)
        voxelId = 240;
    
    if (distance(density, 0) < 1)
    {
        for (int iX = 0; iX < 4; iX++)
            for (int iZ = 0; iZ < 4; iZ++)
            {
                for (int iY = 0; iY < 4; iY++)
                {
                    density = getDensity(id + chunkPosition + (float3(iX, iY, iZ) * 0.25), height, bHeight);
                    if (distance(density, 0) < .125)
                    {
                        voxel.setVoxelDensity(iX, iY, iZ, true);
                    }

                }
            }
    }
    if (voxelId != 0)
        InterlockedAdd(count[0], 1);
    
    voxel.setId(voxelId);
    voxelArray[flattenCoord(id)] = voxel;

}